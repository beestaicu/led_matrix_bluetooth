
led_matrix_bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000034e  000003e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000034e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800108  00800108  000003ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000917  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ea  00000000  00000000  00000ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005cd  00000000  00000000  000015c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043b  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000194  00000000  00000000  00002093  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002227  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e4       	ldi	r30, 0x4E	; 78
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  9e:	0c 94 a5 01 	jmp	0x34a	; 0x34a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
#include "USART_M328P.h"
uint8_t buffer;
volatile uint8_t StrRX_flag = 0;


ISR(USART_RX_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	buffer = UDR0;
  b2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  b6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <buffer>
	StrRX_flag =1;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
}
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <main>:

int main(void)
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	2a 97       	sbiw	r28, 0x0a	; 10
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	f8 94       	cli
  da:	de bf       	out	0x3e, r29	; 62
  dc:	0f be       	out	0x3f, r0	; 63
  de:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0b11111111; // set port b0,1,2,3,4,5 as output for led column
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	84 b9       	out	0x04, r24	; 4
    DDRD = 0b11000000; // set port d6,7 as output for led column, set port d0,1 as input for Tx,Rx
  e4:	90 ec       	ldi	r25, 0xC0	; 192
  e6:	9a b9       	out	0x0a, r25	; 10
	DDRC = 0b00111111; // set port c0,1,2,3,4 output for led row
  e8:	9f e3       	ldi	r25, 0x3F	; 63
  ea:	97 b9       	out	0x07, r25	; 7
	PORTB = 0b00000000;
  ec:	15 b8       	out	0x05, r1	; 5
	PORTC = 0b11111111;
  ee:	88 b9       	out	0x08, r24	; 8
	USART0Init();
  f0:	0e 94 72 01 	call	0x2e4	; 0x2e4 <USART0Init>
	sei();
  f4:	78 94       	sei
	USART_putstring("A");
  f6:	85 e0       	ldi	r24, 0x05	; 5
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	0e 94 8d 01 	call	0x31a	; 0x31a <USART_putstring>
	USART_send_char(10);
  fe:	8a e0       	ldi	r24, 0x0A	; 10
 100:	0e 94 9d 01 	call	0x33a	; 0x33a <USART_send_char>
	uint8_t  portC[5] = {0b11111110,0b11111101,0b11111011,0b11110111,0b11101111}; // port c 01234low
 104:	85 e0       	ldi	r24, 0x05	; 5
 106:	e0 e0       	ldi	r30, 0x00	; 0
 108:	f1 e0       	ldi	r31, 0x01	; 1
 10a:	de 01       	movw	r26, r28
 10c:	11 96       	adiw	r26, 0x01	; 1
 10e:	01 90       	ld	r0, Z+
 110:	0d 92       	st	X+, r0
 112:	8a 95       	dec	r24
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x42>
	uint8_t  portB[5] = {0b00000000,0b00000000,0b00000000,0b00000000,0b00000000};
 116:	fe 01       	movw	r30, r28
 118:	36 96       	adiw	r30, 0x06	; 6
 11a:	85 e0       	ldi	r24, 0x05	; 5
 11c:	df 01       	movw	r26, r30
 11e:	1d 92       	st	X+, r1
 120:	8a 95       	dec	r24
 122:	e9 f7       	brne	.-6      	; 0x11e <main+0x52>
				
			}
			
			if (buffer == 121){
				//y on and off
				PORTB ^= (1<<PORTB0);
 124:	41 e0       	ldi	r20, 0x01	; 1
 126:	9e 01       	movw	r18, r28
 128:	25 5f       	subi	r18, 0xF5	; 245
 12a:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t  portD[5] = {0b00000000,0b00000000};
	uint8_t j;
	
	while (1)
	{
		if (StrRX_flag == 1){
 12c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	09 f0       	breq	.+2      	; 0x136 <main+0x6a>
 134:	d2 c0       	rjmp	.+420    	; 0x2da <main+0x20e>
			if (buffer == 48){
 136:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <buffer>
 13a:	80 33       	cpi	r24, 0x30	; 48
 13c:	21 f4       	brne	.+8      	; 0x146 <main+0x7a>
				//0 on
				portB[0] += 0b00000001;
 13e:	8e 81       	ldd	r24, Y+6	; 0x06
 140:	8f 5f       	subi	r24, 0xFF	; 255
 142:	8e 83       	std	Y+6, r24	; 0x06
 144:	b9 c0       	rjmp	.+370    	; 0x2b8 <main+0x1ec>
			
			}
			if (buffer == 122){
 146:	8a 37       	cpi	r24, 0x7A	; 122
 148:	21 f4       	brne	.+8      	; 0x152 <main+0x86>
				//z off
				portB[0] -= 0b00000001;
 14a:	8e 81       	ldd	r24, Y+6	; 0x06
 14c:	81 50       	subi	r24, 0x01	; 1
 14e:	8e 83       	std	Y+6, r24	; 0x06
 150:	b3 c0       	rjmp	.+358    	; 0x2b8 <main+0x1ec>
				
			}
			
			if (buffer == 121){
 152:	89 37       	cpi	r24, 0x79	; 121
 154:	21 f4       	brne	.+8      	; 0x15e <main+0x92>
				//y on and off
				PORTB ^= (1<<PORTB0);
 156:	85 b1       	in	r24, 0x05	; 5
 158:	84 27       	eor	r24, r20
 15a:	85 b9       	out	0x05, r24	; 5
 15c:	ad c0       	rjmp	.+346    	; 0x2b8 <main+0x1ec>
				
			}
			
			else if (buffer == 49){
 15e:	81 33       	cpi	r24, 0x31	; 49
 160:	21 f4       	brne	.+8      	; 0x16a <main+0x9e>
				//1
				portB[1] += 0b00000001;
 162:	8f 81       	ldd	r24, Y+7	; 0x07
 164:	8f 5f       	subi	r24, 0xFF	; 255
 166:	8f 83       	std	Y+7, r24	; 0x07
 168:	a7 c0       	rjmp	.+334    	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 50){
 16a:	82 33       	cpi	r24, 0x32	; 50
 16c:	21 f4       	brne	.+8      	; 0x176 <main+0xaa>
				//2
				portB[2] += 0b00000001;
 16e:	88 85       	ldd	r24, Y+8	; 0x08
 170:	8f 5f       	subi	r24, 0xFF	; 255
 172:	88 87       	std	Y+8, r24	; 0x08
 174:	a1 c0       	rjmp	.+322    	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 51){
 176:	83 33       	cpi	r24, 0x33	; 51
 178:	21 f4       	brne	.+8      	; 0x182 <main+0xb6>
				//3
				portB[3] += 0b00000001;
 17a:	89 85       	ldd	r24, Y+9	; 0x09
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	89 87       	std	Y+9, r24	; 0x09
 180:	9b c0       	rjmp	.+310    	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 52){
 182:	84 33       	cpi	r24, 0x34	; 52
 184:	21 f4       	brne	.+8      	; 0x18e <main+0xc2>
				//4
				portB[4] += 0b00000001;
 186:	8a 85       	ldd	r24, Y+10	; 0x0a
 188:	8f 5f       	subi	r24, 0xFF	; 255
 18a:	8a 87       	std	Y+10, r24	; 0x0a
 18c:	95 c0       	rjmp	.+298    	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 53){
 18e:	85 33       	cpi	r24, 0x35	; 53
 190:	21 f4       	brne	.+8      	; 0x19a <main+0xce>
				//5
				portB[0] += 0b00000010;
 192:	8e 81       	ldd	r24, Y+6	; 0x06
 194:	8e 5f       	subi	r24, 0xFE	; 254
 196:	8e 83       	std	Y+6, r24	; 0x06
 198:	8f c0       	rjmp	.+286    	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 54){
 19a:	86 33       	cpi	r24, 0x36	; 54
 19c:	21 f4       	brne	.+8      	; 0x1a6 <main+0xda>
				//6
				portB[1] += 0b00000010;
 19e:	8f 81       	ldd	r24, Y+7	; 0x07
 1a0:	8e 5f       	subi	r24, 0xFE	; 254
 1a2:	8f 83       	std	Y+7, r24	; 0x07
 1a4:	89 c0       	rjmp	.+274    	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 55){
 1a6:	87 33       	cpi	r24, 0x37	; 55
 1a8:	21 f4       	brne	.+8      	; 0x1b2 <main+0xe6>
				//7
				portB[2] += 0b00000010;
 1aa:	88 85       	ldd	r24, Y+8	; 0x08
 1ac:	8e 5f       	subi	r24, 0xFE	; 254
 1ae:	88 87       	std	Y+8, r24	; 0x08
 1b0:	83 c0       	rjmp	.+262    	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 56){
 1b2:	88 33       	cpi	r24, 0x38	; 56
 1b4:	21 f4       	brne	.+8      	; 0x1be <main+0xf2>
				//8
				portB[3] += 0b00000010;
 1b6:	89 85       	ldd	r24, Y+9	; 0x09
 1b8:	8e 5f       	subi	r24, 0xFE	; 254
 1ba:	89 87       	std	Y+9, r24	; 0x09
 1bc:	7d c0       	rjmp	.+250    	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 57){
 1be:	89 33       	cpi	r24, 0x39	; 57
 1c0:	21 f4       	brne	.+8      	; 0x1ca <main+0xfe>
				//9
				portB[4] += 0b00000010;
 1c2:	8a 85       	ldd	r24, Y+10	; 0x0a
 1c4:	8e 5f       	subi	r24, 0xFE	; 254
 1c6:	8a 87       	std	Y+10, r24	; 0x0a
 1c8:	77 c0       	rjmp	.+238    	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 65){
 1ca:	81 34       	cpi	r24, 0x41	; 65
 1cc:	21 f4       	brne	.+8      	; 0x1d6 <main+0x10a>
				//A
				portB[0] += 0b00000100;
 1ce:	8e 81       	ldd	r24, Y+6	; 0x06
 1d0:	8c 5f       	subi	r24, 0xFC	; 252
 1d2:	8e 83       	std	Y+6, r24	; 0x06
 1d4:	71 c0       	rjmp	.+226    	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 66){
 1d6:	82 34       	cpi	r24, 0x42	; 66
 1d8:	21 f4       	brne	.+8      	; 0x1e2 <main+0x116>
				//B
				portB[1] += 0b00000100;
 1da:	8f 81       	ldd	r24, Y+7	; 0x07
 1dc:	8c 5f       	subi	r24, 0xFC	; 252
 1de:	8f 83       	std	Y+7, r24	; 0x07
 1e0:	6b c0       	rjmp	.+214    	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 67){
 1e2:	83 34       	cpi	r24, 0x43	; 67
 1e4:	21 f4       	brne	.+8      	; 0x1ee <main+0x122>
				//C
				portB[2] += 0b00000100;
 1e6:	88 85       	ldd	r24, Y+8	; 0x08
 1e8:	8c 5f       	subi	r24, 0xFC	; 252
 1ea:	88 87       	std	Y+8, r24	; 0x08
 1ec:	65 c0       	rjmp	.+202    	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 68){
 1ee:	84 34       	cpi	r24, 0x44	; 68
 1f0:	21 f4       	brne	.+8      	; 0x1fa <main+0x12e>
				//D
				portB[3] += 0b00000100;
 1f2:	89 85       	ldd	r24, Y+9	; 0x09
 1f4:	8c 5f       	subi	r24, 0xFC	; 252
 1f6:	89 87       	std	Y+9, r24	; 0x09
 1f8:	5f c0       	rjmp	.+190    	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 69){
 1fa:	85 34       	cpi	r24, 0x45	; 69
 1fc:	21 f4       	brne	.+8      	; 0x206 <main+0x13a>
				//E
				portB[4] += 0b00000100;
 1fe:	8a 85       	ldd	r24, Y+10	; 0x0a
 200:	8c 5f       	subi	r24, 0xFC	; 252
 202:	8a 87       	std	Y+10, r24	; 0x0a
 204:	59 c0       	rjmp	.+178    	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 70){
 206:	86 34       	cpi	r24, 0x46	; 70
 208:	21 f4       	brne	.+8      	; 0x212 <main+0x146>
				//F
				portB[0] += 0b00001000;
 20a:	8e 81       	ldd	r24, Y+6	; 0x06
 20c:	88 5f       	subi	r24, 0xF8	; 248
 20e:	8e 83       	std	Y+6, r24	; 0x06
 210:	53 c0       	rjmp	.+166    	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 71){
 212:	87 34       	cpi	r24, 0x47	; 71
 214:	21 f4       	brne	.+8      	; 0x21e <main+0x152>
				//G
				portB[1] += 0b00001000;
 216:	8f 81       	ldd	r24, Y+7	; 0x07
 218:	88 5f       	subi	r24, 0xF8	; 248
 21a:	8f 83       	std	Y+7, r24	; 0x07
 21c:	4d c0       	rjmp	.+154    	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 72){
 21e:	88 34       	cpi	r24, 0x48	; 72
 220:	21 f4       	brne	.+8      	; 0x22a <main+0x15e>
				//H
				portB[2] += 0b00001000;
 222:	88 85       	ldd	r24, Y+8	; 0x08
 224:	88 5f       	subi	r24, 0xF8	; 248
 226:	88 87       	std	Y+8, r24	; 0x08
 228:	47 c0       	rjmp	.+142    	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 73){
 22a:	89 34       	cpi	r24, 0x49	; 73
 22c:	21 f4       	brne	.+8      	; 0x236 <main+0x16a>
				//I
				portB[3] += 0b00001000;
 22e:	89 85       	ldd	r24, Y+9	; 0x09
 230:	88 5f       	subi	r24, 0xF8	; 248
 232:	89 87       	std	Y+9, r24	; 0x09
 234:	41 c0       	rjmp	.+130    	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 74){
 236:	8a 34       	cpi	r24, 0x4A	; 74
 238:	21 f4       	brne	.+8      	; 0x242 <main+0x176>
				//J
				portB[4] += 0b00001000;
 23a:	8a 85       	ldd	r24, Y+10	; 0x0a
 23c:	88 5f       	subi	r24, 0xF8	; 248
 23e:	8a 87       	std	Y+10, r24	; 0x0a
 240:	3b c0       	rjmp	.+118    	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 75){
 242:	8b 34       	cpi	r24, 0x4B	; 75
 244:	21 f4       	brne	.+8      	; 0x24e <main+0x182>
				//K
				portB[0] += 0b00010000;
 246:	8e 81       	ldd	r24, Y+6	; 0x06
 248:	80 5f       	subi	r24, 0xF0	; 240
 24a:	8e 83       	std	Y+6, r24	; 0x06
 24c:	35 c0       	rjmp	.+106    	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 76){
 24e:	8c 34       	cpi	r24, 0x4C	; 76
 250:	21 f4       	brne	.+8      	; 0x25a <main+0x18e>
				//L
				portB[1] += 0b00010000;
 252:	8f 81       	ldd	r24, Y+7	; 0x07
 254:	80 5f       	subi	r24, 0xF0	; 240
 256:	8f 83       	std	Y+7, r24	; 0x07
 258:	2f c0       	rjmp	.+94     	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 77){
 25a:	8d 34       	cpi	r24, 0x4D	; 77
 25c:	21 f4       	brne	.+8      	; 0x266 <main+0x19a>
				//M
				portB[2] += 0b00010000;
 25e:	88 85       	ldd	r24, Y+8	; 0x08
 260:	80 5f       	subi	r24, 0xF0	; 240
 262:	88 87       	std	Y+8, r24	; 0x08
 264:	29 c0       	rjmp	.+82     	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 78){
 266:	8e 34       	cpi	r24, 0x4E	; 78
 268:	21 f4       	brne	.+8      	; 0x272 <main+0x1a6>
				//N
				portB[3] += 0b00010000;
 26a:	89 85       	ldd	r24, Y+9	; 0x09
 26c:	80 5f       	subi	r24, 0xF0	; 240
 26e:	89 87       	std	Y+9, r24	; 0x09
 270:	23 c0       	rjmp	.+70     	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 79){
 272:	8f 34       	cpi	r24, 0x4F	; 79
 274:	21 f4       	brne	.+8      	; 0x27e <main+0x1b2>
				//O
				portB[4] += 0b00010000;
 276:	8a 85       	ldd	r24, Y+10	; 0x0a
 278:	80 5f       	subi	r24, 0xF0	; 240
 27a:	8a 87       	std	Y+10, r24	; 0x0a
 27c:	1d c0       	rjmp	.+58     	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 80){
 27e:	80 35       	cpi	r24, 0x50	; 80
 280:	21 f4       	brne	.+8      	; 0x28a <main+0x1be>
				//P
				portB[0] += 0b00100000;
 282:	8e 81       	ldd	r24, Y+6	; 0x06
 284:	80 5e       	subi	r24, 0xE0	; 224
 286:	8e 83       	std	Y+6, r24	; 0x06
 288:	17 c0       	rjmp	.+46     	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 81){
 28a:	81 35       	cpi	r24, 0x51	; 81
 28c:	21 f4       	brne	.+8      	; 0x296 <main+0x1ca>
				//Q
				portB[1] += 0b00100000;
 28e:	8f 81       	ldd	r24, Y+7	; 0x07
 290:	80 5e       	subi	r24, 0xE0	; 224
 292:	8f 83       	std	Y+7, r24	; 0x07
 294:	11 c0       	rjmp	.+34     	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 82){
 296:	82 35       	cpi	r24, 0x52	; 82
 298:	21 f4       	brne	.+8      	; 0x2a2 <main+0x1d6>
				//R
				portB[2] += 0b00100000;
 29a:	88 85       	ldd	r24, Y+8	; 0x08
 29c:	80 5e       	subi	r24, 0xE0	; 224
 29e:	88 87       	std	Y+8, r24	; 0x08
 2a0:	0b c0       	rjmp	.+22     	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 83){
 2a2:	83 35       	cpi	r24, 0x53	; 83
 2a4:	21 f4       	brne	.+8      	; 0x2ae <main+0x1e2>
				//S
				portB[3] += 0b00100000;
 2a6:	89 85       	ldd	r24, Y+9	; 0x09
 2a8:	80 5e       	subi	r24, 0xE0	; 224
 2aa:	89 87       	std	Y+9, r24	; 0x09
 2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <main+0x1ec>
			}
			else if (buffer == 84){
 2ae:	84 35       	cpi	r24, 0x54	; 84
 2b0:	19 f4       	brne	.+6      	; 0x2b8 <main+0x1ec>
				//T
				portB[4] += 0b00100000;
 2b2:	8a 85       	ldd	r24, Y+10	; 0x0a
 2b4:	80 5e       	subi	r24, 0xE0	; 224
 2b6:	8a 87       	std	Y+10, r24	; 0x0a
			}
			
		StrRX_flag =0;
 2b8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 2bc:	0e c0       	rjmp	.+28     	; 0x2da <main+0x20e>
		}
		for (j = 0;j <5;j++){
			PORTB = portB[j];
 2be:	81 91       	ld	r24, Z+
 2c0:	85 b9       	out	0x05, r24	; 5
			PORTC = portC[j];
 2c2:	8d 91       	ld	r24, X+
 2c4:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c6:	8f e9       	ldi	r24, 0x9F	; 159
 2c8:	9f e0       	ldi	r25, 0x0F	; 15
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <main+0x1fe>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0x204>
 2d0:	00 00       	nop
				portB[4] += 0b00100000;
			}
			
		StrRX_flag =0;
		}
		for (j = 0;j <5;j++){
 2d2:	e2 17       	cp	r30, r18
 2d4:	f3 07       	cpc	r31, r19
 2d6:	99 f7       	brne	.-26     	; 0x2be <main+0x1f2>
 2d8:	29 cf       	rjmp	.-430    	; 0x12c <main+0x60>
 2da:	fe 01       	movw	r30, r28
 2dc:	36 96       	adiw	r30, 0x06	; 6
 2de:	de 01       	movw	r26, r28
 2e0:	11 96       	adiw	r26, 0x01	; 1
 2e2:	ed cf       	rjmp	.-38     	; 0x2be <main+0x1f2>

000002e4 <USART0Init>:
{
	// Wait for byte to be received
	while(!(UCSR0A&(1<<RXC0))){};
	// Return received data
	return UDR0;
}
 2e4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 2e8:	87 e6       	ldi	r24, 0x67	; 103
 2ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 2ee:	e2 ec       	ldi	r30, 0xC2	; 194
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	86 60       	ori	r24, 0x06	; 6
 2f6:	80 83       	st	Z, r24
 2f8:	e1 ec       	ldi	r30, 0xC1	; 193
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	88 61       	ori	r24, 0x18	; 24
 300:	80 83       	st	Z, r24
 302:	80 81       	ld	r24, Z
 304:	80 68       	ori	r24, 0x80	; 128
 306:	80 83       	st	Z, r24
 308:	08 95       	ret

0000030a <USART0SendByte>:
 30a:	e0 ec       	ldi	r30, 0xC0	; 192
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	90 81       	ld	r25, Z
 310:	95 ff       	sbrs	r25, 5
 312:	fd cf       	rjmp	.-6      	; 0x30e <USART0SendByte+0x4>
 314:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 318:	08 95       	ret

0000031a <USART_putstring>:

void USART_putstring(char* StringPtr){
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0x00){
 320:	88 81       	ld	r24, Y
 322:	88 23       	and	r24, r24
 324:	39 f0       	breq	.+14     	; 0x334 <USART_putstring+0x1a>
 326:	21 96       	adiw	r28, 0x01	; 1
		USART0SendByte(*StringPtr);
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 85 01 	call	0x30a	; 0x30a <USART0SendByte>
	return UDR0;
}

void USART_putstring(char* StringPtr){
	
	while(*StringPtr != 0x00){
 32e:	89 91       	ld	r24, Y+
 330:	81 11       	cpse	r24, r1
 332:	fa cf       	rjmp	.-12     	; 0x328 <USART_putstring+0xe>
	StringPtr++;
	
	}
	
	
}
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	08 95       	ret

0000033a <USART_send_char>:
void USART_send_char( char  data)
{
	//while the transmit buffer is not empty loop
	while(!(UCSR0A & (1<<UDRE0)));
 33a:	e0 ec       	ldi	r30, 0xC0	; 192
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	90 81       	ld	r25, Z
 340:	95 ff       	sbrs	r25, 5
 342:	fd cf       	rjmp	.-6      	; 0x33e <USART_send_char+0x4>
	
	//when the buffer is empty write data to the transmitted
	UDR0 = data;
 344:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 348:	08 95       	ret

0000034a <_exit>:
 34a:	f8 94       	cli

0000034c <__stop_program>:
 34c:	ff cf       	rjmp	.-2      	; 0x34c <__stop_program>
